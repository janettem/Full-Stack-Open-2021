{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","then","response","data","create","newObject","post","update","put","id","remove","delete","Filter","filter","setFilter","value","onChange","event","target","PersonForm","createPerson","name","setName","number","setNumber","onSubmit","type","Persons","persons","removePerson","map","person","Person","onClick","Notification","message","style","isSuccessfulOperation","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","useState","setPersons","setIsSuccessfulOperation","setMessage","useEffect","initialPersons","updatePerson","personToUpdate","changedPerson","window","confirm","returnedPerson","clearPersonForm","setNotification","catch","setTimeout","personsToShow","toLowerCase","includes","preventDefault","find","personToCreate","concat","personToRemove","ReactDOM","render","document","getElementById"],"mappings":"wKAEMA,EAAU,eAwBDC,EAFO,CAAEC,OApBT,WAEb,OADgBC,IAAMC,IAAIJ,GACXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkBXC,OAfjB,SAAAC,GAEb,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAaHI,OAVzB,SAAAF,GAEb,OADgBN,IAAMS,IAAN,UAAaZ,EAAb,YAAwBS,EAAUI,IAAMJ,GACzCJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQKO,OALjC,SAAAD,GAEb,OADgBV,IAAMY,OAAN,UAAgBf,EAAhB,YAA2Ba,IAC5BR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,OCuFrCS,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,UAAX,OACb,oDAEE,uBAAOC,MAAOF,EAAQG,SAAU,SAAAC,GAAK,OAAIH,EAAUG,EAAMC,OAAOH,cAI9DI,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,QAASC,EAAhC,EAAgCA,OAAQC,EAAxC,EAAwCA,UAAxC,OACjB,uBAAMC,SAAUL,EAAhB,UACE,wCAEE,uBAAOL,MAAOM,EAAML,SAAU,SAAAC,GAAK,OAAIK,EAAQL,EAAMC,OAAOH,aAG9D,0CAEE,uBAAOA,MAAOQ,EAAQP,SAAU,SAAAC,GAAK,OAAIO,EAAUP,EAAMC,OAAOH,aAGlE,wBAAQW,KAAK,SAAb,qBAIEC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAZ,OACd,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,cAAC,EAAD,CAEEA,OAAQA,EACRF,aAAc,kBAAMA,EAAaE,KAF5BA,EAAOtB,UAQduB,EAAS,SAAC,GAAD,IAAGD,EAAH,EAAGA,OAAQF,EAAX,EAAWA,aAAX,OACb,8BACGE,EAAOV,KADV,IACiBU,EAAOR,OACtB,wBAAQU,QAASJ,EAAjB,wBAIEK,EAAe,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,QAqBhBC,EArBqD,EAA5BC,sBACE,CAC/BC,MAAO,QACPC,WAAY,YACZC,SAAU,GACVC,YAAa,QACbC,aAAc,EACdC,QAAS,GACTC,aAAc,IAGmB,CACjCN,MAAO,MACPC,WAAY,YACZC,SAAU,GACVC,YAAa,QACbC,aAAc,EACdC,QAAS,GACTC,aAAc,IAOhB,OAAgB,OAAZT,EACK,KAIP,qBAAKC,MAAOA,EAAZ,SACGD,KAKQU,EAvLH,WACV,MAA8BC,mBAAS,IAAvC,mBAAOlB,EAAP,KAAgBmB,EAAhB,KACA,EAA4BD,mBAAS,IAArC,mBAAOjC,EAAP,KAAeC,EAAf,KACA,EAAwBgC,mBAAS,IAAjC,mBAAOzB,EAAP,KAAaC,EAAb,KACA,EAA4BwB,mBAAS,IAArC,mBAAOvB,EAAP,KAAeC,EAAf,KACA,EAA0DsB,oBAAS,GAAnE,mBAAOT,EAAP,KAA8BW,EAA9B,KACA,EAA8BF,mBAAS,MAAvC,mBAAOX,EAAP,KAAgBc,EAAhB,KAEAC,qBAAU,WACRrD,EACGC,SACAG,MAAK,SAAAkD,GAAc,OAAIJ,EAAWI,QACpC,IAEH,IAmBMC,EAAe,SAAAC,GACnB,IAAMC,EAAa,2BAAQD,GAAR,IAAwB9B,WAEvCgC,OAAOC,QAAQnC,6EAEjBxB,EACGU,OAAO+C,GACPrD,MAAK,SAAAwD,GACJV,EAAWnB,EAAQE,KAAI,SAAAC,GAAM,OAC3BA,EAAOtB,KAAO4C,EAAe5C,GAAKsB,EAAS0B,MAE7CC,IACAC,EAAgB,YAAD,OAAaN,EAAehC,KAA5B,cAA6C,MAE7DuC,OAAM,WACLb,EAAWnB,EAAQf,QAAO,SAAAkB,GAAM,OAAIA,EAAOtB,KAAO4C,EAAe5C,OACjEkD,EAAgB,kBAAoBN,EAAehC,KAC/C,yCAAyC,OAgB/CqC,EAAkB,WACtBpC,EAAQ,IACRE,EAAU,KAGNmC,EAAkB,SAACxB,EAASE,GAChCW,EAAyBX,GACzBY,EAAWd,GACX0B,YAAW,kBAAMZ,EAAW,QAAO,MAG/Ba,EAAgBlC,EAAQf,QAAO,SAAAkB,GAAM,OACzCA,EAAOV,KAAK0C,cAAcC,SAASnD,EAAOkD,kBAG5C,OACE,gCACE,2CACA,cAAC,EAAD,CACE5B,QAASA,EACTE,sBAAuBA,IAEzB,cAAC,EAAD,CAAQxB,OAAQA,EAAQC,UAAWA,IAEnC,2CACA,cAAC,EAAD,CACEM,aA9Ee,SAAAH,GACnBA,EAAMgD,iBAEN,IAAMlC,EAASH,EAAQsC,MAAK,SAAAnC,GAAM,OAAIV,IAASU,EAAOV,QAChD8C,EAAiB,CAAE9C,OAAME,UAE3BQ,EACFqB,EAAarB,GAEblC,EACGO,OAAO+D,GACPlE,MAAK,SAAAwD,GACJV,EAAWnB,EAAQwC,OAAOX,IAC1BC,IACAC,EAAgB,SAAD,OAAUF,EAAepC,OAAQ,OAiElDA,KAAMA,EACNC,QAASA,EACTC,OAAQA,EACRC,UAAWA,IAGb,yCACA,cAAC,EAAD,CAASI,QAASkC,EAAejC,aA7ChB,SAAAwC,GACfd,OAAOC,QAAP,iBAAyBa,EAAehD,KAAxC,OACFxB,EACGa,OAAO2D,EAAe5D,IACtBR,MAAK,WACJ8C,EAAWnB,EAAQf,QAAO,SAAAkB,GAAM,OAAIA,EAAOtB,KAAO4D,EAAe5D,OACjEkD,EAAgB,WAAD,OAAYU,EAAehD,OAAQ,aC7D5DiD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a5490ca8.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = newObject => {\n  const request = axios.put(`${baseUrl}/${newObject.id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst personService = { getAll, create, update, remove }\n\nexport default personService\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [filter, setFilter] = useState('')\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n  const [isSuccessfulOperation, setIsSuccessfulOperation] = useState(true)\n  const [message, setMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => setPersons(initialPersons))\n  }, [])\n\n  const createPerson = event => {\n    event.preventDefault()\n\n    const person = persons.find(person => name === person.name)\n    const personToCreate = { name, number }\n\n    if (person) {\n      updatePerson(person)\n    } else {\n      personService\n        .create(personToCreate)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          clearPersonForm()\n          setNotification(`Added ${returnedPerson.name}`, true)\n        })\n    }\n  }\n\n  const updatePerson = personToUpdate => {\n    const changedPerson = { ...personToUpdate, number }\n\n    if (window.confirm(name + ' is already added to phonebook'\n      + ', replace the old number with a new one?')) {\n      personService\n        .update(changedPerson)\n        .then(returnedPerson => {\n          setPersons(persons.map(person =>\n            person.id !== personToUpdate.id ? person : returnedPerson\n          ))\n          clearPersonForm()\n          setNotification(`Replaced ${personToUpdate.name}'s number`, true)\n        })\n        .catch(() => {\n          setPersons(persons.filter(person => person.id !== personToUpdate.id))\n          setNotification('Information of ' + personToUpdate.name\n            + ' has already been removed from server', false)\n        })\n    }\n  }\n\n  const removePerson = personToRemove => {\n    if (window.confirm(`Delete ${personToRemove.name}?`)) {\n      personService\n        .remove(personToRemove.id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== personToRemove.id))\n          setNotification(`Deleted ${personToRemove.name}`, true)\n        })\n    }\n  }\n\n  const clearPersonForm = () => {\n    setName('')\n    setNumber('')\n  }\n\n  const setNotification = (message, isSuccessfulOperation) => {\n    setIsSuccessfulOperation(isSuccessfulOperation)\n    setMessage(message)\n    setTimeout(() => setMessage(null), 5000)\n  }\n\n  const personsToShow = persons.filter(person =>\n    person.name.toLowerCase().includes(filter.toLowerCase())\n  )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification\n        message={message}\n        isSuccessfulOperation={isSuccessfulOperation}\n      />\n      <Filter filter={filter} setFilter={setFilter} />\n\n      <h2>Add a new</h2>\n      <PersonForm\n        createPerson={createPerson}\n        name={name}\n        setName={setName}\n        number={number}\n        setNumber={setNumber}\n      />\n\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} removePerson={removePerson} />\n    </div>\n  )\n}\n\nconst Filter = ({ filter, setFilter }) => (\n  <div>\n    filter shown with\n    <input value={filter} onChange={event => setFilter(event.target.value)} />\n  </div>\n)\n\nconst PersonForm = ({ createPerson, name, setName, number, setNumber }) => (\n  <form onSubmit={createPerson}>\n    <div>\n      name:\n      <input value={name} onChange={event => setName(event.target.value)} />\n    </div>\n\n    <div>\n      number:\n      <input value={number} onChange={event => setNumber(event.target.value)} />\n    </div>\n\n    <button type=\"submit\">add</button>\n  </form>\n)\n\nconst Persons = ({ persons, removePerson }) => (\n  <div>\n    {persons.map(person =>\n      <Person\n        key={person.id}\n        person={person}\n        removePerson={() => removePerson(person)}\n      />\n    )}\n  </div>\n)\n\nconst Person = ({ person, removePerson }) => (\n  <p>\n    {person.name} {person.number}\n    <button onClick={removePerson}>delete</button>\n  </p>\n)\n\nconst Notification = ({ message, isSuccessfulOperation }) => {\n  const successfulOperationStyle = {\n    color: 'green',\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  }\n\n  const unsuccessfulOperationStyle = {\n    color: 'red',\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  }\n\n  const style = isSuccessfulOperation\n    ? successfulOperationStyle\n    : unsuccessfulOperationStyle\n\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={style}>\n      {message}\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}